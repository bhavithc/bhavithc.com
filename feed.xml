<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://bhavithc.github.io/</id><title>Bhavith C</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2024-06-11T22:46:40+05:30</updated> <author> <name>Bhavith C</name> <uri>https://bhavithc.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://bhavithc.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://bhavithc.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> Â© 2024 Bhavith C </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Understand the asop repository</title><link href="https://bhavithc.github.io/posts/understand-the-asop-repository/" rel="alternate" type="text/html" title="Understand the asop repository" /><published>2024-06-11T21:50:02+05:30</published> <updated>2024-06-11T21:50:02+05:30</updated> <id>https://bhavithc.github.io/posts/understand-the-asop-repository/</id> <content src="https://bhavithc.github.io/posts/understand-the-asop-repository/" /> <author> <name>Bhavith C</name> </author> <category term="aosp" /> <summary> When I first time cloned and build the aosp code, I was very much wonder how few commands can get us the android OS Commands Clone the repo $ repo init --partial-clone -b main -u https://android.googlesource.com/platform/manifest $ repo sync -c -j8 Build the code $ source build/envsetup.sh $ lunch aosp_cf_x86_64_phone-trunk_staging-userdebug $ make Android project is very big, the way the... </summary> </entry> <entry><title>Design Patterns Intents and Motivations</title><link href="https://bhavithc.github.io/posts/design-patterns-intents-and-motivations/" rel="alternate" type="text/html" title="Design Patterns Intents and Motivations" /><published>2024-03-26T20:56:58+05:30</published> <updated>2024-04-14T18:57:44+05:30</updated> <id>https://bhavithc.github.io/posts/design-patterns-intents-and-motivations/</id> <content src="https://bhavithc.github.io/posts/design-patterns-intents-and-motivations/" /> <author> <name>Bhavith C</name> </author> <category term="design-pattern" /> <summary> In this blog we gonna see about some of the important aspects of the design patterns such as Intent, Also known as, Motivation, Applicability, Structure, Participants and Related Patterns Creational Patterns Creational design patterns abstract the instantiation process They help make a system independent of how its objects are created, composed, and represented Creational patterns are o... </summary> </entry> <entry><title>Design Patterns Slides</title><link href="https://bhavithc.github.io/posts/design-patterns-in-c/" rel="alternate" type="text/html" title="Design Patterns Slides" /><published>2024-03-19T20:38:52+05:30</published> <updated>2024-03-19T20:38:52+05:30</updated> <id>https://bhavithc.github.io/posts/design-patterns-in-c/</id> <content src="https://bhavithc.github.io/posts/design-patterns-in-c/" /> <author> <name>Bhavith C</name> </author> <category term="design-pattern" /> <summary> Design Patterns in C++ Here are some of the helpful slide which is derived from Gang of four </summary> </entry> <entry><title>Is const reference always thread safe when used as function parameter?</title><link href="https://bhavithc.github.io/posts/is-const-reference-always-thread-safe-when-used-as-function-parameter/" rel="alternate" type="text/html" title="Is const reference always thread safe when used as function parameter?" /><published>2023-02-21T23:30:00+05:30</published> <updated>2023-02-21T23:30:00+05:30</updated> <id>https://bhavithc.github.io/posts/is-const-reference-always-thread-safe-when-used-as-function-parameter/</id> <content src="https://bhavithc.github.io/posts/is-const-reference-always-thread-safe-when-used-as-function-parameter/" /> <author> <name>Bhavith C</name> </author> <category term="c" /> <summary> Many people has a fear of thread safety when using const reference as parameter to a function. As usual lets start with some examples and understand the thread safety of const reference Lets consider simple Test object struct Test { Test() { } void name(std::string t) { m_name = t; } std::string name() const { return m_name; } std::st... </summary> </entry> <entry><title>Do you know int main takes three arguments</title><link href="https://bhavithc.github.io/posts/do-you-know-int-main-takes-three-arguments/" rel="alternate" type="text/html" title="Do you know int main takes three arguments" /><published>2022-06-29T22:00:00+05:30</published> <updated>2022-06-29T22:00:00+05:30</updated> <id>https://bhavithc.github.io/posts/do-you-know-int-main-takes-three-arguments/</id> <content src="https://bhavithc.github.io/posts/do-you-know-int-main-takes-three-arguments/" /> <author> <name>Bhavith C</name> </author> <category term="c" /> <summary> Many of us know how to read command line arguments from the program in C/C++ #include &amp;lt;iostream&amp;gt; int main(int argc, char** pArgv) { for (int i = 0; i &amp;lt; argc; i++) { std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; " - " &amp;lt;&amp;lt; pArgv[i] &amp;lt;&amp;lt; "\n"; } return 0; } Output: bhavith@bhavith:$ ./a.out first second 0 - ./a.out 1 - first 2 - second But do you know int main takes o... </summary> </entry> </feed>
